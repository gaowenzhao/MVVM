apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//apply plugin: 'android-aspectjx'
android {
    compileSdkVersion rootProject.ext.compileSdk
    defaultConfig {
        applicationId "com.zhao.app"
        minSdkVersion rootProject.ext.minSdk
        targetSdkVersion rootProject.ext.targetSdk
        versionCode rootProject.ext.verCode
        versionName rootProject.ext.verName
        flavorDimensions "versionCode"
        multiDexEnabled true
    }
    android {
        compileOptions {
            sourceCompatibility 1.8
            targetCompatibility 1.8
        }
        kotlinOptions {
            jvmTarget = '1.8'
        }
    }
    signingConfigs {
        signing {
            //签名秘钥库文件的存放的位置，这里使用的是相对路径
            storeFile file('hzed.jks')
            //秘钥库的访问密码
            storePassword 'hzed123'
            //别名，因为一个密码库可以供多个项目使用，所以别名不同，最后的签名也是不同的
            keyAlias 'rootjacks'
            //别名的私钥密码
            keyPassword 'hzed123'
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    buildTypes {
        debug {
//            applicationIdSuffix '.debug'
            ndk {
                //选择要添加的对应cpu类型的.so库
                abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
                // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
            }
            // Zipalign优化
            zipAlignEnabled true
        }

        release {
            ndk {
                //选择要添加的对应cpu类型的.so库
                abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a'
                // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
            }
            // 混淆是否开启
            minifyEnabled true
            // Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            // 加载默认混淆配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // 签名
            signingConfig signingConfigs.signing
        }
    }
    dataBinding {
        enabled true
    }

}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //热更新Tinker
    //若使用annotation需要单独引用,对于tinker的其他库都无需再引用
    annotationProcessor("com.tinkerpatch.tinker:tinker-android-anno:1.9.13")
    compileOnly("com.tinkerpatch.tinker:tinker-android-anno:1.9.13")
    implementation("com.tinkerpatch.sdk:tinkerpatch-android-sdk:1.2.13")
    //宿主项目中判断组件是否需要独立运行
    if (rootProject.ext.isBuildModule.toBoolean()) {
        //组件独立运行时，宿主项目直接依赖基础库，避免编译错误
        implementation project(':library-base')
    } else {
        //首页
        implementation project(':module-home')
        //消息模块
        implementation project(':module-msg')
        //用户模块
        implementation project(':module-user')
    }
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${rootProject.ext.kotlin_version}"

}
repositories {
    mavenCentral()
}
// 依赖插件脚本
//apply from: 'tinkerpatch.gradle'
// 多渠道使用walle示例（注：多渠道使用）
//apply from: 'multiple-channel.gradle'
